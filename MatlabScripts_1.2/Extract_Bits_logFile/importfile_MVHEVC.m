% Author: Waqas Ahmad (waqas.ahmad@miun.se)
% Copyright(c) Realistic 3D Research Group,
%              Mid Sweden University, Sweden
%              http://https://www.miun.se/en/Research/research-centers/stc-researchcentre/about-stc/Research-Groups/Realistic-3D/
% All rights reserved [02-09-2019].


function QP10 = importfile_MVHEVC(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   QP10 = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   QP10 = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   QP10 = importfile1('QP_10.txt', 3, 1292);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/09/03 16:13:52

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[6,8,10,11,12,13,14,15,17,20,23,26,28,30,32,35,36,37,38,39]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [6,8,10,11,12,13,14,15,17,20,23,26,28,30,32,35,36,37,38,39]);
rawStringColumns = string(raw(:, [1,2,3,4,5,7,9,16,18,19,21,22,24,25,27,29,31,33,34,40,41,42,43]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,3,4,5,6]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
QP10 = table;
QP10.HTM = categorical(rawStringColumns(:, 1));
QP10.Software = categorical(rawStringColumns(:, 2));
QP10.Encoder = categorical(rawStringColumns(:, 3));
QP10.Version = categorical(rawStringColumns(:, 4));
QP10.MV = categorical(rawStringColumns(:, 5));
QP10.based = cell2mat(rawNumericColumns(:, 1));
QP10.on = categorical(rawStringColumns(:, 6));
QP10.HM = cell2mat(rawNumericColumns(:, 2));
QP10.Version1 = rawStringColumns(:, 7);
QP10.WindowsVS = cell2mat(rawNumericColumns(:, 3));
QP10.VarName11 = cell2mat(rawNumericColumns(:, 4));
QP10.bit = cell2mat(rawNumericColumns(:, 5));
QP10.VarName13 = cell2mat(rawNumericColumns(:, 6));
QP10.VarName14 = cell2mat(rawNumericColumns(:, 7));
QP10.VarName15 = cell2mat(rawNumericColumns(:, 8));
QP10.VarName16 = rawStringColumns(:, 8);
QP10.VarName17 = cell2mat(rawNumericColumns(:, 9));
QP10.VarName18 = rawStringColumns(:, 9);
QP10.VarName19 = rawStringColumns(:, 10);
QP10.VarName20 = cell2mat(rawNumericColumns(:, 10));
QP10.VarName21 = rawStringColumns(:, 11);
QP10.VarName22 = rawStringColumns(:, 12);
QP10.VarName23 = cell2mat(rawNumericColumns(:, 11));
QP10.VarName24 = rawStringColumns(:, 13);
QP10.VarName25 = rawStringColumns(:, 14);
QP10.VarName26 = cell2mat(rawNumericColumns(:, 12));
QP10.VarName27 = rawStringColumns(:, 15);
QP10.VarName28 = cell2mat(rawNumericColumns(:, 13));
QP10.VarName29 = rawStringColumns(:, 16);
QP10.VarName30 = cell2mat(rawNumericColumns(:, 14));
QP10.VarName31 = rawStringColumns(:, 17);
QP10.VarName32 = cell2mat(rawNumericColumns(:, 15));
QP10.VarName33 = rawStringColumns(:, 18);
QP10.VarName34 = rawStringColumns(:, 19);
QP10.VarName35 = cell2mat(rawNumericColumns(:, 16));
QP10.VarName36 = cell2mat(rawNumericColumns(:, 17));
QP10.VarName37 = cell2mat(rawNumericColumns(:, 18));
QP10.VarName38 = cell2mat(rawNumericColumns(:, 19));
QP10.VarName39 = cell2mat(rawNumericColumns(:, 20));
QP10.VarName40 = rawStringColumns(:, 20);
QP10.VarName41 = rawStringColumns(:, 21);
QP10.VarName42 = rawStringColumns(:, 22);
QP10.VarName43 = rawStringColumns(:, 23);

